@page "/profile"

@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using System.Net.Http.Headers;
@using OpenBook.Shared.SupportData;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigation
@inject HttpClient client

<style>
    .mainContainer {
        display: flex;
        flex-direction: row;
        background: f3f3f3;
        border-radius: 25px;
        padding: 2%;
        justify-content: space-evenly;
        align-items: flex-start;
    }

    .columnContainer {
        flex: 1;
        text-align: center;
        background: #f3f3f3;
        border-radius: 10px;
        padding: 2%;
        margin: 10px;
    }

    .innerDiv {
        background: #f3f3f3;
        border-radius: 10px;
        padding: 10px;
        border: 1px solid black;
        margin-bottom: 20px;
    }

    button {
        width: 100%;
        margin-top: 10px;
    }
</style>

@if (user == null)
{
    <span>Загрузка...</span>
}
else
{
    <div class="mainContainer">
        <!-- Колонка с информацией пользователя -->
        <div class="columnContainer">
            <div class="innerDiv">
                <p style="font-weight: 300; font-size: x-large">@user.Value.Name</p>
                <p>Почта: @user.Value.Email</p>
                <span>Роль:</span>
                <p>@user.Value.Role.Name</p>
                @if (user.Value.IsVerified)
                {
                    <span style="color: green;">Ваш аккаунт верифицирован</span>
                }
                else
                {
                    <span style="color: red;">Ваш аккаунт не верифицирован!</span>
                    <button class="btn btn-success">Пройти верификацию</button>
                }
                <button class="btn btn-secondary" @onclick="GoToPasswordChanger">Сменить пароль</button>
                <button class="btn btn-primary" @onclick="() => GoToEditBooks(0)">Мои книги</button>
            </div>
        </div>

        <!-- Колонка для административных функций -->
        @if (user.Value.Role.Name == "Admin" || user.Value.Role.Name == "SuperAdmin")
        {
            <div class="columnContainer">
                <div class="innerDiv">
                    <button class="btn btn-secondary" @onclick="GoToAdminPanel">Админ панель</button>
                </div>
            </div>
        }
    </div>
}

@code {
    bool? isAuth = null;
    AuthView authView = new AuthView();
    AuthInfo authInfo = new AuthInfo();
    Response? response;

    Response<UserDto>? user;

    bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            if (cookieContent != null && await CheckAuth())
            {
                isAuth = true;
            }
        }
        catch (Exception ex)
        {
            isAuth = false;
            navigation.NavigateTo("SignIn");
        }
    }
    async Task<bool> CheckAuth()
    {
        user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return user.IsSuccess;
    }
    async Task EditChange()
    {
        if (editMode)
        {
            using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/User/UpdateWithEntity", user);
            editMode = false;
        }
        else
        {
            editMode = true;
        }
    }
    void GoToAdminPanel()
    {
        navigation.NavigateTo("adminpanel");
    }
    void GoToEditBooks(int id)
    {
        navigation.NavigateTo($"mybooks");
    }
    void GoToPasswordChanger()
    {
        navigation.NavigateTo($"passwordChange");
    }
}