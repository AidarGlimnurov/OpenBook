@page "/ChapterEditor/{Id}/{Number}/{BookId}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@implements IDisposable
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<div class="jumbotron bg-light rounded-1 m-2 p-2">
    <div style="height: 100%; text-align: center;">
        <button class="btn btn-primary" @onclick="Save" style="margin: 5px">Сохранить</button>
    </div>
    <div>
        <input class="form-control mt-1 mb-1" type="text" placeholder="Название" @bind="chapter.Name">
        <p>Номер главы: @chapter.Number</p>
        <p><a href="bookeditor/@BookId">Вернуться к книге</a></p>
    </div>
    @if (Id != "0" && unicView?.Info != null && allView?.Info != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th><strong>Статистика*</strong></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Количество уникальных просмотров:</td>
                    <td>@unicView?.Info</td>
                </tr>
                <tr>
                    <td>Количество просмотров:</td>
                    <td>@allView?.Info</td>
                </tr>
                <tr >
                    <td colspan="2"><small>*в статистике учитываются только авторизованные пользователей</small></td>
                </tr>
            </tbody>
        </table>
    }
    <div>
        <h3></h3>
    </div>
    @if (Id != "0" && !isLoadChpter)
    {
        <div>Загрузка...</div>
    }
    else
    {
        <div class="col-md-12">
            <MarkdownEditor @bind-Value="@chapter.Content" 
                    ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />
            <hr />
            <div class="jumbotron bg-white p-2 rounded-1 border-1 border-dark">
            @((MarkupString)markdownHtml)
            </div>
        </div>
    }
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Number { get; set; }
    [Parameter]
    public string BookId { get; set; }

    ChapterDto chapter = new();

    bool isLoadChpter = false;

    Timer timer;


    async Task Save()
    {
        chapter.Number = chapter.Number ?? Convert.ToInt32(Number);//ToDo в сущности Number стал int?
        chapter.IsPublic = Id == "0" ? false : chapter.IsPublic;
        chapter.BookId = chapter.BookId ?? Convert.ToInt32(BookId);

        if (Id == "0")
        {
            using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Chapter/Create", chapter);
            TestResponse.EnsureSuccessStatusCode();
            var response = await TestResponse.Content.ReadFromJsonAsync<Response>();
            if (response.IsSuccess)
            {
                navigation.NavigateTo($"BookEditor/{BookId}");
            }
        }
        else
        {
            using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Chapter/Update", chapter);
            TestResponse.EnsureSuccessStatusCode();
            var response = await TestResponse.Content.ReadFromJsonAsync<Response>();
            if (response.IsSuccess)
            {
                Console.WriteLine("Успешно сохранено!");
            }
        }
    }
    Response unicView;
    Response allView;
    protected override async Task OnInitializedAsync()
    {
        if (Id == "0")
        {
            chapter.Number = Convert.ToInt32(Number);
        }
        else
        {
            unicView = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Post/GetUnicViewForChapter?chapterId={Id}");
            allView = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Post/GetViewForChapter?chapterId={Id}");
            var resp = await client.GetFromJsonAsync<Response<ChapterDto>>($"https://localhost:7190/api/Chapter/Read?id={Id}");
            chapter = resp.Value;
            OnMarkdownValueHTMLChanged(chapter.Content);
            isLoadChpter = true;
        }

        AutoSave();
    }

    public void Dispose()
    {
        timer.Dispose();
    }

    private async Task AutoSave()
    {
        timer = new Timer(async (_) =>
        {
            if (chapter.Content != string.Empty && chapter.Name != string.Empty)
            {
                await Save();
            }
            StateHasChanged();
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

    string markdownHtml;
    string markdownStr = "# Ukfdf 1";

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        return Task.CompletedTask;
    }
    //https://www.nuget.org/packages/PSC.Blazor.Components.MarkdownEditor
}