@page "/mybooks"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3 style="text-align:center">Мои Книги</h3>
<style>
    .container {
        border: 2px solid black;
        border-radius: 10px;
        padding: 20px;
        width: 100%;
        margin: auto;
        margin-top: 50px;
    }
    .book-image{
        width: 20%;
        height: 15%;
    }
    .book-details{
        width: 50%;
    }
    .book-actions {
        text-align: right;
        margin-top: 10px;
    }

    /* The switch - the box around the slider */
    .switch {
        text-align:center;
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    /* Hide default HTML checkbox */
    .switch input {display:none;}

    /* The slider */
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }

    input:checked + .slider {
      background-color: #2196F3;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }
    .checkSlider{
        text-align:center;
        display: flex;
        align-items: center; /* Центрирование по вертикали */
        justify-content: center; /* Равномерное распределение по горизонтали */
    }
</style>
<div class="checkSlider">
    <span>неопубл.</span>
    <label class="switch">
       <input type="checkbox" @onchange="TogglePublishStatus">
      <span class="slider round"></span>
    </label>
    <span>опубл.</span>
    <br>
</div>

<div class="checkSlider">
    <button @onclick="Create" class="btn btn-primary" style="margin:10px;">
        Создать книгу
    </button>
</div>
<div class="checkSlider">
    <button @onclick="GoToCycles" class="btn btn-secondary " style="margin:10px;">
        Создать цикл
    </button>
</div>

@if (books == null)
{
    <span>Загрузка...</span>
}
else
{
    @if (books.Value != null)
    {
        <div style="min-height:40vh;">
            @foreach (var book in books.Value.Data)
            {
                <div class="container" style="padding: 5px">
                    <div class="d-flex flex-wrap" style="width:100%">
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)" style="background:gray; height: 20%; width: 15%;" >
                        <div class="book-details">
                            <div class="book-title">@book.Name</div>
                            <div class="book-chapters">Главы: ?</div>
                        </div>
                        <div class="book-actions" style="text-align:right;">
                            <button class="btn btn-warning" @onclick="() => EditBook(book.Id)">
                                <img src="../image/Pencil.svg" alt="Edit" style="width:20px;height:20px;">
                            </button>
                            <br>
                            <button class="btn btn-danger" @onclick="() => DeleteBook(book.Id)">
                                <img src="../image/Delete.svg" alt="Delete" style="width:20px;height:20px;">
                            </button>
                        </div>
                    </div>
                </div>
            }        

        </div>
    }
    else
    {
        <span>Скоро здесь будут Ваши книги!</span>
    }
        <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center; margin: 15px">
            <div style="text-align: left; font-size:15pt; display: flex; flex-direction: row; align-items: center;">
            @if (books.Value.Start > 0)
            {
                        <button class="oi oi-arrow-left  btn btn-secondary" @onclick="GetLastPage" style="background:#F8E9A1; border: none;  height: 100%"></button>
            }
            else
            {
                        <button class="oi oi-arrow-left btn btn-secondary" disabled style="background:#F8E9A1; border: none;  height: 100%"></button>
            }
            </div>
            <div style=" font-size:15pt;">@PageNumber</div>
            <div style="text-align: left; font-size:15pt; display: flex; flex-direction: row; align-items: center;">
            @if (books.Value.Count == 10)
            {
                        <button class="oi oi-arrow-right btn btn-secondary" @onclick="GetNextPage" style="background:#F8E9A1; border: none; height: 100%"></button>
            }
            else
            {
                        <button class="oi oi-arrow-right  btn btn-secondary" disabled style="background:#F8E9A1; border: none;  height: 100%"></button>
            }
            </div>
        </div>
}
@code {
    Response<DataPage<BookDto>>? books;
    int pageCount = 0;
    int start = 0;
    int count = 10;
    public int PageNumber { get; set; } = 1;
    string name = string.Empty;

    bool IsPublished { get; set; } = false;

    Response<UserDto>? response = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            response = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            await GetBooks(false);
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("SignIn");
        }
    }

    async Task TogglePublishStatus(ChangeEventArgs args)
    {
        IsPublished = !IsPublished;
        if (IsPublished)
        {
            await GetBooks(true);
        }
        else
        {
            await GetBooks(false);
        }
    }
    void EditBook(int bookId)
    {
        navigation.NavigateTo($"bookeditor/{bookId}");
    }

    async Task DeleteBook(int bookId)
    {
        await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Book/Delete?id={bookId}");
    }
    async Task GetBooks(bool isPub)
    {
        books = await client.GetFromJsonAsync<Response<DataPage<BookDto>>>($"https://localhost:7190/api/Book/GetBooksForAuthor?userId={response.Value.Id}&start={start}&count={count}&isPublic={isPub}");
    }
    void Create()
    {
        navigation.NavigateTo("bookeditor/0");
    }
    public async Task GetNextPage()
    {
        start += 10;
        PageNumber++;
        if (IsPublished)
        {
            await GetBooks(true);
        }
        else
        {
            await GetBooks(false);
        }
    }
    public async Task GetLastPage()
    {
        start -= 10;
        PageNumber--;
        if (IsPublished)
        {
            await GetBooks(true);
        }
        else
        {
            await GetBooks(false);
        }
    }
    public void GoToCycles()
    {
        navigation.NavigateTo("mycycles");
    }
}
