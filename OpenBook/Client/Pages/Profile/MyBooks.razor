@page "/mybooks"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3 style="text-align:center">Мои Книги</h3>
<style>
    .container {
        border: 2px solid black;
        border-radius: 10px;
        padding: 20px;
        width: 100%;
        margin: auto;
        margin-top: 50px;
    }
/*     .book-image{
        width: 20%;
        height: 15%;
    }
    .book-details{
        width: 50%;
    }
    .book-actions {
        text-align: right;
        margin-top: 10px;
    } */

    /* The switch - the box around the slider */
    .switch {
        text-align:center;
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    /* Hide default HTML checkbox */
    .switch input {display:none;}

    /* The slider */
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }

    input:checked + .slider {
      background-color: #2196F3;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }
    .checkSlider{
        text-align:center;
        display: flex;
        align-items: center; /* Центрирование по вертикали */
        justify-content: center; /* Равномерное распределение по горизонтали */
    }
    .book-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: start;
    }
    .book-card {
        width: 200px;
        height: 270px;
        margin: 8px;
        text-align: center;
        cursor: pointer;
    }
    .book-card img {
        width: 100%;
        height: 200px;
        background-color: gray;
    }
    .book-card .book-title {
        color: black;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>
<div class="jumbotron bg-light p-2 m-2 rounded-1">
    <div class="checkSlider">
        <span>неопубл.</span>
        <label class="switch">
           <input type="checkbox" @onchange="TogglePublishStatus">
          <span class="slider round"></span>
        </label>
        <span>опубл.</span>
        <br>
    </div>

    <div class="checkSlider">
        <button @onclick="Create" class="btn btn-primary" style="margin:10px;">
            Создать книгу
        </button>
    </div>
    @*     <div class="checkSlider">
        <button @onclick="GoToCycles" class="btn btn-secondary " style="margin:10px;">
            Создать цикл
        </button>
    </div> *@

    @if (books == null)
    {
        <div class="text-center m-3">
            <div class="spinner-border" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }
    else
    {
        @if (books.Value != null)
        {
            <div class="book-grid rounded-1">
                @foreach (var book in books.Value.Data)
                {
                    <div class="book-card">
                        <div class="book-title rounded-1">@book.Name[0].ToString().ToUpper()@book.Name.Substring(1, book.Name.Length-1)</div>
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)" style="background:gray;" alt="Обложка книги">
                        <div class="btn-group" role="group"  aria-label="Basic example">
                            <button type="button" class="btn btn-warning oi oi-pencil" @onclick="() => EditBook(book.Id)">
                            </button>
                            <br>
                            <button type="button" class="btn btn-danger oi oi-trash" @onclick="() => DeleteBook(book.Id)">
                            </button>
                        </div>
                    </div>
                }        

            </div>
        }
        else
        {
            <span>Скоро здесь будут Ваши книги!</span>
        }

            <nav aria-label="Page navigation" class="pagination justify-content-center">
                <ul class="pagination">
                    <li class="page-item @(PageNumber > 1 ? "" : "disabled")">
                        <button class="page-link" @onclick="GetLastPage">Предыдущая</button>
                    </li>
                    <li class="page-item disabled">
                        <a class="page-link">@PageNumber</a>
                    </li>
                    <li class="page-item @(books.Value.Count == 10 ? "" : "disabled")">
                        <button class="page-link" @onclick="GetNextPage">Следующая</button>
                    </li>
                </ul>
            </nav>

        @*         <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center; margin: 15px">
            <div style="text-align: left; font-size:15pt; display: flex; flex-direction: row; align-items: center;">
                @if (books.Value.Start > 0)
                {
                    <button class="oi oi-arrow-left  btn btn-secondary" @onclick="GetLastPage" style="background:#F8E9A1; border: none;  height: 100%"></button>
                }
                else
                {
                    <button class="oi oi-arrow-left btn btn-secondary" disabled style="background:#F8E9A1; border: none;  height: 100%"></button>
                }
            </div>
            <div style=" font-size:15pt;">@PageNumber</div>
            <div style="text-align: left; font-size:15pt; display: flex; flex-direction: row; align-items: center;">
                @if (books.Value.Count == 10)
                {
                    <button class="oi oi-arrow-right btn btn-secondary" @onclick="GetNextPage" style="background:#F8E9A1; border: none; height: 100%"></button>
                }
                else
                {
                    <button class="oi oi-arrow-right  btn btn-secondary" disabled style="background:#F8E9A1; border: none;  height: 100%"></button>
                }
            </div>
        </div> *@
    }
</div>
@code {
    Response<DataPage<BookDto>>? books;
    int pageCount = 0;
    int start = 0;
    int count = 10;
    public int PageNumber { get; set; } = 1;
    string name = string.Empty;

    bool IsPublished { get; set; } = false;

    Response<UserDto>? response = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            response = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            await GetBooks(false);
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("SignIn");
        }
    }

    private bool HasPreviousPage() => PageNumber > 1;
    private bool HasNextPage() => books?.Value.Count == count;

    public async Task GetNextPage()
    {
        start += count;
        PageNumber++;
        if (IsPublished)
        {
            await GetBooks(true);
        }
        else
        {
            await GetBooks(false);
        }
    }

    public async Task GetLastPage()
    {
        if (HasPreviousPage())
        {
            start -= count;
            PageNumber--;
            if (IsPublished)
            {
                await GetBooks(true);
            }
            else
            {
                await GetBooks(false);
            }
        }
    }

    async Task TogglePublishStatus(ChangeEventArgs args)
    {
        IsPublished = !IsPublished;
        if (IsPublished)
        {
            await GetBooks(true);
        }
        else
        {
            await GetBooks(false);
        }
    }
    void EditBook(int bookId)
    {
        navigation.NavigateTo($"bookeditor/{bookId}");
    }

    async Task DeleteBook(int bookId)
    {
        await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Book/Delete?id={bookId}");
    }
    async Task GetBooks(bool isPub)
    {
        books = await client.GetFromJsonAsync<Response<DataPage<BookDto>>>($"https://localhost:7190/api/Book/GetBooksForAuthor?userId={response.Value.Id}&start={start}&count={count}&isPublic={isPub}");
    }
    void Create()
    {
        navigation.NavigateTo("bookeditor/0");
    }
    // public async Task GetNextPage()
    // {
    //     start += 10;
    //     PageNumber++;
    //     if (IsPublished)
    //     {
    //         await GetBooks(true);
    //     }
    //     else
    //     {
    //         await GetBooks(false);
    //     }
    // }
    // public async Task GetLastPage()
    // {
    //     start -= 10;
    //     PageNumber--;
    //     if (IsPublished)
    //     {
    //         await GetBooks(true);
    //     }
    //     else
    //     {
    //         await GetBooks(false);
    //     }
    // }
    public void GoToCycles()
    {
        navigation.NavigateTo("mycycles");
    }
}