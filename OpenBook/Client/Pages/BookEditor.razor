@page "/BookEditor/{Id}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    .headBox{
        text-align: center;
    }
    .container {
      display: flex;
      flex: 1 1;
      flex-direction:row;
      flex-wrap: wrap;
      justify-content: space-between;
      padding: 20px;
      width: 100%;
    }
    .box {
      background-color: #ccc;
      padding: 10px;
    }


    /* The switch - the box around the slider */
    .switch {
        text-align:center;
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    /* Hide default HTML checkbox */
    .switch input {display:none;}

    /* The slider */
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }

    input:checked + .slider {
      background-color: #2196F3;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }
    .checkSlider{
        margin: 3px;
        text-align:center;
        display: flex;
        align-items: center; /* Центрирование по вертикали */
        justify-content: center; /* Равномерное распределение по горизонтали */
    }

    .content {
        width: 50%;
    }
</style>
@if (Id != "0" && book.Name == null)
{
            <span>Загрузка...</span>
}
else
{
    <div class="mainBox">
        <div class="headBox">
            <div class="checkSlider">
                <span>неопубл.</span>
                <label class="switch">
                   <input type="checkbox" @bind="book.IsPublished">
                  <span class="slider round"></span>
                </label>
                <span>опубл.</span>
                <br>
            </div>
            <div>
            @if (Id == "0")
            {
                    <button class="btn btn-primary" style="margin: 3px;" @onclick = "CreateBook">Создать</button>
            }
            else
            {
                    <button class="btn btn-primary" style="margin: 3px;" @onclick = "UpdateBook">Сохранить</button>
            }
            </div>
        </div>
        <div class="box">
            <div class="container">
                <div class="content" style="text-align: center">
                    <img style="width: 90%; height: 40vh" src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)">
                    <button class="btn btn-secondary">
                        <InputFile OnChange="HandleFileChange" />
                    </button>
                </div>
    
                <div class="content">
                    <input type="text" placeholder="Название" @bind="book.Name">
                    <br>
    
                    <input type="text" placeholder="Автор" @bind="book.Author">
                    <br>
                    <div style="display: flex; flex-direction: row; flex: 1 1">
                        <select @bind="book.CycleId">
                           <option selected>Выбрать</option>
                        @if (Cycles != null)
                        {
                            @foreach (var cycle in Cycles.Value.Data)
                            {
                                <option value="@cycle.Id">@cycle.Name</option>
                            }                            
                        }
                        </select>
                        <button class="btn btn-success" @onclick="GoToCycleEditor">+</button>
                        <div style="display: flex; flex-direction: column">
                        @if (BookGenres != null)
                        {
                            @foreach (var genre in BookGenres.Value.Data)
                            {
                                <label>@genre.Name <button @onclick="(()=>RemoveGenre(genre.Id))">Удалить</button></label>
                            }     
                        }
    
                            <select @onchange="HandleGenreChange">
                            @*                                <option value="0" selected>Выбрать</option>*@
    
                            @if (Genres != null)
                            {
                                @foreach (var genre in Genres.Value.Data)
                                {
                                    <option value="@genre.Id">@genre.Name</option>
                                } 
                            }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
    
            <div class="description" style="width: 100%">
                <input type="text" style="width: 100%" placeholder="Описание" @bind="book.Description">
            </div>
        </div>
    
    @if (Id == "0")
    {
            <span>...</span>
    }
    else
    {
        <h4 style="text-align: center; padding-top: 10px; margin: 0px">Главы</h4>
        <div class="box">
            <table class="table">
                <tr>
                    <th>
                        №
                    </th>
                    <th>
                        Название
                    </th>
                    <th>
                        публ.
                    </th>
                    <th>
                        наверх
                    </th>
                    <th>
                        вниз
                    </th>
                </tr>
            @if (chapters != null)
            {
                @foreach (var chapter in chapters.Value.Data)
                {
                    <tr>
                        <td>
                        @chapter.Number
                        </td>
                        <td>
                            <button @onclick="(()=>GoToChapterEditor(chapter.Id, chapter.Number.Value))">@chapter.Name</button>
                        </td>
                        <td>
                            <input type="checkbox" @onclick="(()=>PulishedChapter(chapter.Id, chapter.IsPublic))" checked="@chapter.IsPublic">
                        </td>
                        <td>
                        @if (chapter.Number == 1)
                        {
                                    <button disabled>&#8593;</button>
                        }
                        else
                        {
                                    <button @onclick="(()=>NumberChange(true, chapter.Number.Value))">&#8593;</button>
                        }
                        </td>
                        <td>
                        @if (chapter.Number == chapters.Value.Data.Length)
                        {
                                    <button disabled>&#8595;</button>
                        }
                        else
                        {
                                    <button @onclick="(()=>NumberChange(false, chapter.Number.Value))">&#8595;</button>
                        }
                        </td>
                    </tr>
                }                        
            }
                <tr>
                    <td>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="(()=>GoToChapterEditor(0, chapters.Value.Data.Length + 1))">Добавить главу</button>
                    </td>
                </tr>
            </table>
        </div>        
    }
    </div>
}
@code {
    [Parameter]
    public string Id { get; set; }

    Response<DataPage<ChapterDto>>? chapters;
    Response<DataPage<CycleDto>>? Cycles;
    Response<DataPage<GenreDto>>? Genres;
    Response<DataPage<GenreDto>>? BookGenres;

    BookDto book = new();

    bool isPublic = true;

    Response? response;

    Response<UserDto>? user = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            if (Id == "0")
            {
                book.UserId = user.Value.Id;
            }
            else
            {
                var resp = await client.GetFromJsonAsync<Response<BookDto>>($"https://localhost:7190/api/Book/Read?id={Id}");
                await GetChapters();
                Cycles = await client.GetFromJsonAsync<Response<DataPage<CycleDto>>>($"https://localhost:7190/api/Cycle/GetAllForUser?userId={user.Value.Id}&start={0}");
                Genres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetAll?start={0}");
                //BookGenres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetGenresForBook?bookId={Id}&start={0}");
                await GetBookGenres();
                book = resp.Value;
            }
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("SignIn");
        }
    }
    async Task GetChapters()
    {
        chapters = await client.GetFromJsonAsync<Response<DataPage<ChapterDto>>>($"https://localhost:7190/api/Chapter/GetForBook?bookId={Id}&start={0}");
    }
    void GoToChapterEditor(int Id, int Number)
    {
        navigation.NavigateTo($"ChapterEditor/{Id}/{Number}/{book.Id}");
    }

    async Task<bool> CheckAuth()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return resp.IsSuccess;
    }

    void SwitchAction()
    {
        isPublic = !isPublic;

    }
    async Task UpdateBook()
    {
        using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Book/Update", book);
        TestResponse.EnsureSuccessStatusCode();
        response = await TestResponse.Content.ReadFromJsonAsync<Response>();
    }
    async Task CreateBook()
    {
        using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Book/Create", book);
        TestResponse.EnsureSuccessStatusCode();
        response = await TestResponse.Content.ReadFromJsonAsync<Response>();
        if (response.IsSuccess)
        {
            navigation.NavigateTo("mybooks");
        }
        if (!response.IsSuccess)
        {
            navigation.NavigateTo("");
        }
    }
    private IBrowserFile selectedImage;
    private string uploadMessage;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
        if (selectedImage != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await selectedImage.OpenReadStream().CopyToAsync(memoryStream);
                var imageBytes = memoryStream.ToArray();

                book.Cover = imageBytes;
            }
        }
    }
    private async Task NumberChange(bool isUp, int number)
    {
        bool isSucces;
        if (isUp)
        {
            chapters.Value.Data[number - 1].Number--;
            chapters.Value.Data[number - 2].Number++;
            isSucces = await ToUpDown(chapters.Value.Data[number - 2]);
        }
        else
        {
            chapters.Value.Data[number - 1].Number++;
            chapters.Value.Data[number].Number--;
            isSucces = await ToUpDown(chapters.Value.Data[number]);
        }
        var isSucces1 = await ToUpDown(chapters.Value.Data[number - 1]);
        if (isSucces && isSucces1)
        {
            await GetChapters();
        }
    }
    private async Task<bool> ToUpDown(ChapterDto chapter)
    {
        using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Chapter/Update", chapter);
        TestResponse.EnsureSuccessStatusCode();
        var response = await TestResponse.Content.ReadFromJsonAsync<Response>();
        return response.IsSuccess;
    }
    void GoToCycleEditor()
    {
        navigation.NavigateTo($"cycleeditor/0/{book.Id}");
    }
    async Task AddGenre(int Id)
    {
        var r = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Book/AddGenre?bookId={this.Id}&genreId={Id}");
        if (r.IsSuccess)
        {
            await GetBookGenres();
            //BookGenres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetGenresForBook?bookId={this.Id}&start={0}");
        }
    }
    async Task RemoveGenre(int Id)
    {
        await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Book/RemoveGenre?bookId={this.Id}&genreId={Id}");
        await GetBookGenres();
        //BookGenres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetGenresForBook?bookId={this.Id}&start={0}");
    }
    private void HandleGenreChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int genreId))
        {
            AddGenre(genreId);
        }
    }
    private async Task GetBookGenres()
    {
        BookGenres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetGenresForBook?bookId={this.Id}&start={0}");
    }
    private async Task PulishedChapter(int id, bool isPub)
    {
        await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Chapter/Published?chapterId={id}&action={!isPub}");
    }
}