@page "/bookReader/{Id}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@using System.ComponentModel;
@using System.Net;
@using System.Web;
@using iTextSharp.text;
@using iTextSharp.text.html.simpleparser;
@using iTextSharp.text.pdf;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<style>
    .refHover:hover{
        cursor: pointer;
        background: #F4BB01;
    }
    .divHover:hover{
        cursor: pointer;
        background: #F4BB01;
    }
    .labelHover:hover{
        cursor: pointer;
    }
</style>

@if (chapter == null)
{
        <p>Загрузка...</p>
}
else
{
        <a href="bookcontent/@chapter.BookId">Назад</a>
        <h2>Глава @chapter.Number</h2>
        <h2>@chapter.Name</h2>
    @*     <a href="@path" class="refHover">
        <div class="divHover" style="height: 4vh; width: 12vh; margin-top: 5px; margin-bottom: 5px; color: black; border-radius: 5px; background: #FFC300; text-align:center; padding:0.5vh">
            <label class="labelHover">Скачать</label>
        </div>
    </a> *@
        <div class="jumbotron mt-3 p-2 border-1 rounded-1" style="background: #f6f7f7; width: 100%; min-height: 100vh;">
        @((MarkupString)markdownHtml)
        </div>

}

@code {
    [Parameter]
    public string Id { get; set; }

    string markdownHtml;
    string path;
    ChapterDto chapter;
    protected override async Task OnInitializedAsync()
    {
        var resp = await client.GetFromJsonAsync<Response<ChapterDto>>($"https://localhost:7190/api/Chapter/Read?id={Id}");
        chapter = resp.Value;
        markdownHtml = Markdown.ToHtml(chapter.Content);
        int a = 0;
        path = $"https://localhost:7190/api/Chapter/DownloadFile?data={HttpUtility.UrlEncode(markdownHtml)}&name={HttpUtility.UrlEncode(chapter.Name)}.pdf";
    }
    private string ConvertMarkdownToHtml(string markdown)
    {
        var pipeline = new Markdig.MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        return Markdig.Markdown.ToHtml(markdown, pipeline);
    }
    private async Task DownloadPDF()
    {
        //var pdfBytes = await GeneratePDF();
        string fullName = chapter.Name + ".pdf";
        navigation.NavigateTo($"https://localhost:7190/api/Chapter/DownloadFile?data={markdownHtml}&name={fullName}");
    }

    private async Task<byte[]> GeneratePDF()
    {
        // Создаем документ PDF
        Document document = new Document();
        MemoryStream memoryStream = new MemoryStream();
        PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        // Преобразуем HTML в PDF
        StringReader stringReader = new StringReader(markdownHtml);
        HTMLWorker htmlWorker = new HTMLWorker(document);
        htmlWorker.Parse(stringReader);

        // Закрываем документ
        document.Close();

        // Возвращаем PDF в виде массива байтов
        return memoryStream.ToArray();
    }
}
