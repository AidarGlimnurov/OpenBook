@page "/books"
@using OpenBook.Shared.Dtos
@using OpenBook.Shared.OutputData
@using OpenBook.Shared.SupportData;
@inject HttpClient client
@inject NavigationManager navigation

<style>
    .loading {
        font-size: 20px;
        font-weight: bold;
    }
    .book-list-container {
        background-color: #f3f3f3;
        padding: 20px;
        border-radius: 5px;
        margin-top: 20px;
    }
    .search-section {
        display: flex;
        margin-bottom: 20px;
    }
    .search-input {
        flex-grow: 1;
        margin-right: 10px;
    }
    .search-button {
        width: 50px;
        height: 38px;
    }
    .book-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: start;
    }
    .book-card {
        width: 200px;
        height: 270px;
        margin: 8px;
        text-align: center;
        cursor: pointer;
    }
    .book-card img {
        width: 100%;
        height: 200px;
        background-color: gray;
    }
    .book-card .book-title {
        color: black;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .pagination {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 15px;
    }
    .page-control {
        background-color: #b7b7b7;
        border: none;
        cursor: pointer;
        font-size: 20px;
        padding: 10px;
    }
    .page-number {
        font-size: 18px;
    }
</style>

@if (books == null)
{
    <div class="text-center m-3">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="book-list-container">
        <div class="search-section">
            <input class="form-control search-input" style="text-transform: lowercase" @bind="name" placeholder="Введите название книги..." @onkeydown="@SearchOnEnter">
            <button class="search-button btn btn-primary" @onclick="Search">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    
        <p>
            <button class="btn btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                Фильтры
            </button>
        </p>
        <div class="collapse" id="collapseExample">
            <div class="card card-body">
                <button class="btn btn-success m-1">Искать</button>
                <button class="btn btn-warning m-1">Очистить</button>
                <select class="form-select m-1 w-25" @onchange="HandlePopChange">
                    <option value="0"selected>Нет</option>
                    <option value="1">Популярность возраст.</option>
                    <option> value="2"Популярность убыв.</option>
                    <option value="3">Новое</option>
                </select>
                <select class="form-select m-1 w-25" @onchange="HandleGenreChange">
                    <option>Жанры</option>
                    @if (genres != null)
                    {
                        @foreach (var genre in genres.Value.Data)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }                        
                    }
                </select>
                <div class="row">
                    @foreach (var genre in genreIds)
                    {
                        <button class="btn btn-outline-dark m-1 w-25" @onclick="(()=>DeleteGenre(genre))">@genres.Value.Data.FirstOrDefault(g=>g.Id==genre).Name</button>
                    }
                </div>
            </div>
        </div>
    
        <div class="book-grid">
            @foreach (var book in books.Value.Data)
            {
                <div class="book-card" @onclick="() => ToBook(book.Id)">
                    @if (book.Cover.Length < 20)
                    {
                        <img class="rounded-1" src="/image/DefaultCover.jpg" alt="Обложка книги">
                    }
                    else
                    {
                        <img class="rounded-1" src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)" alt="Обложка книги">
                    }
                    <div class="book-title">@book.Name[0].ToString().ToUpper()@book.Name.Substring(1, book.Name.Length-1)</div>
                </div>
            }
        </div>
    
        <nav aria-label="Page navigation" class="pagination justify-content-center">
            <ul class="pagination">
                <li class="page-item @(PageNumber > 1 ? "" : "disabled")">
                    <button class="page-link" @onclick="GetLastPage">Предыдущая</button>
                </li>
                <li class="page-item disabled">
                    <a class="page-link">@PageNumber</a>
                </li>
                <li class="page-item @(books.Value.Count == 10 ? "" : "disabled")">
                    <button class="page-link" @onclick="GetNextPage">Следующая</button>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    Response<DataPage<BookDto>>? books;
    Response<DataPage<GenreDto>>? genres;
    int start = 0;
    int count = 10;
    public int PageNumber { get; set; } = 1;
    string name = string.Empty;

    List<int> genreIds = new();

    SortData sortData = new();

    protected override async Task OnInitializedAsync()
    {
        await SearchBooks();
        await GetGenres();
    }

    private bool HasPreviousPage() => PageNumber > 1;
    private bool HasNextPage() => books?.Value.Count == count;

    public async Task GetNextPage()
    {
        start += count;
        PageNumber++;
        await SearchBooks();
    }

    public async Task GetLastPage()
    {
        if (HasPreviousPage())
        {
            start -= count;
            PageNumber--;
            await SearchBooks();
        }
    }

    public async Task Search()
    {
        start = 0; // Reset to start when new search is initiated
        PageNumber = 1;
        await SearchBooks();
    }
    private async Task GetGenres()
    {
        genres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetAll?start={0}");
    }
    private async Task SearchBooks()
    {
        books = await client.GetFromJsonAsync<Response<DataPage<BookDto>>>($"https://localhost:7190/api/Book/GetBooks?start={start}&count={count}&isPublic=true&name={name}");
    }

    private void ToBook(int id)
    {
        navigation.NavigateTo($"book/{id}/0");
    }

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchBooks();
        }
    }
    private void HandleGenreChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int genreId))
        {
            genreIds.Add(genreId);
        }
    }
    async Task DeleteGenre(int id)
    {
        genreIds.Remove(id);
    }

    private void HandlePopChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int popId))
        {
            sortData.Action = popId;
        }
    }
}