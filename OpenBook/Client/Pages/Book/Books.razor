@page "/books"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@inject HttpClient client
@inject NavigationManager navigation

<style>
    .container .content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s ease-out;
        width: auto;
    }

    .container .content.show {
        max-height: 200px; /* Меняйте на желаемую высоту */
    }
</style>

@if (books == null)
{
    <label>Загрузка...</label>
}
else
{
<div style="border: 2px solid black; background: #f0f0f0; border-radius: 7px; margin-top: 5px; margin-bottom: 5px;">
    <div class="container" style="text-align: left">
        <div style="margin-top:5px">
            <input id="name" class="input-medium search-query" style="width: 80%" @bind="name"/>
            <button @onclick="Search" class="oi oi-magnifying-glass" style="height: 30px"></button>
        </div>
        <br>
@*        <button @onclick="Toggle" class="btn btn-primary" style="margin-top: 7px; max-width: 50vh">
            @if (isExpanded)
            {
                <label>&cuwed;</label>
            }
            else
            {
                <label>&cuvee;</label>
            }
        </button>*@
        @if (isExpanded)
        {
@*            <div class="content">
                <div>
                   <input id="name" class="input-medium search-query" style="width: 80%" @bind="name"/>
                    <button @onclick="Search" class="oi oi-magnifying-glass" style="height: 30px"></button>
                </div>
            </div>*@
            <button @onclick="CycleSearch" class="btn btn-secondary"  style="max-width: 50vh">Найти по циклу</button>
        }
    </div>
    <div style="min-height: 70vh;">
        <div style=" vertical-align: top;">
            @foreach (var book in books.Value.Data)
            {
                <div style="width: 170px; height: 230px; margin: 8px; display: inline-block; row; text-align: center;">
                    <a href="book/@book.Id">
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)" style="background:gray; width: 170px; height: 200px;" >
                        <label style="color: black">@book.Name</label>
                    </a>
                </div>
            }
        </div>
    </div>

    <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center; margin: 15px">
        <div style="text-align: left; font-size:15pt; display: flex; flex-direction: row; align-items: center;">
            @if (books.Value.Start > 0)
            {
                <button class="oi oi-arrow-left  btn btn-secondary" @onclick="GetLastPage" style="background:#b7b7b7; border: none;  height: 100%"></button>
            }
            else
            {
                <button class="oi oi-arrow-left btn btn-secondary" disabled style="background:#b7b7b7; border: none;  height: 100%"></button>
            }
        </div>
        <div style=" font-size:15pt;">@PageNumber</div>
        <div style="text-align: left; font-size:15pt; display: flex; flex-direction: row; align-items: center;">
            @if (books.Value.Count == 10)
            {
                <button class="oi oi-arrow-right btn btn-secondary" @onclick="GetNextPage" style="background:#b7b7b7; border: none; height: 100%"></button>
            }
            else
            {
                <button class="oi oi-arrow-right  btn btn-secondary" disabled style="background:#b7b7b7; border: none;  height: 100%"></button>
            }
        </div>
    </div>
</div>
}

@code {
    Response<DataPage<BookDto>>? books;
    int pageCount = 0;
    int start = 0;
    int count = 10;
    public int PageNumber { get; set; } = 1;
    string name = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetBooks(start, count);
    }

    private void ToBook(int id)
    {
        navigation.NavigateTo($"book/{id}");
    }

    public async Task GetNextPage()
    {
        start += 10;
        PageNumber++;
        if (name == "")
        {
            await GetBooks(start, count);
        }
        else
        {
            await GetBooks(start, count, name);
        }
    }
    public async Task GetLastPage()
    {
        start -= 10;
        PageNumber--;
        if (name == "")
        {
            await GetBooks(start, count);
        }
        else
        {
            await GetBooks(start, count, name);
        }
    }
    public async Task Search()
    {
        if (name == "")
        {
            await GetBooks(start, count);
        }
        else
        {
            await GetBooks(start, count, name);
        }
    }

    private async Task GetBooks(int start, int count, string? name = "")//"!-!")
    {
        books = await client.GetFromJsonAsync<Response<DataPage<BookDto>>>($"https://localhost:7190/api/Book/GetBooks?start={start}&count={count}&isPublic=true&name={name}");
    }

    private void CycleSearch()
    {
        navigation.NavigateTo("CyclesPage");
    }

    bool isExpanded = false;

    void Toggle()
    {
        isExpanded = !isExpanded;
    }
}