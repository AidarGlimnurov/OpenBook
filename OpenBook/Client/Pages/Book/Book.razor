@page "/book/{Id}/{action}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    .columnContainer{
        display: flex;
        flex-direction: column;
    }

    .rowContainer {
        display: flex;
        flex: 1 1;
        flex-direction:row;
        justify-content: space-evenly;
        padding: 20px;
        width: 100%;
        margin: 5px;
        background: #f3f3f3;
        border-radius: 5px;
    }

    .innerColumnContainer{
        display: flex;
        flex-direction: column;
        padding: 20px;
        width: 100%;
        margin: 5px;
        background: #f3f3f3;
        border-radius: 5px;
    }
    .newLineContainer{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap
    }
    .review{
        border: 1px solid;
        padding: 5px;
        margin: 2px;
        border-radius: 5px;
    }
</style>
@if (book == null)
{
    <div class="text-center m-3">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    @if (action == "0")
    {
        <a href="books">Назад</a>
    }
    else
    {
        <a href="favoritebook">Назад</a>
    }
    <div class="columnContainer jumbotron rounded-2">
        <a href="Books">     </a>
        <div class="rowContainer">
            <div>
            @if (book.Value.Cover.Length < 20)
            {
                <img style="width: 90%; height: 40vh" src="/image/DefaultCover.jpg" alt="Обложка книги">
            }
            else
            {
                <img style="width: 90%; height: 40vh" src="data:image/jpeg;base64,@Convert.ToBase64String(book.Value.Cover)" alt="Обложка книги">
            }
            </div>
            <div class="columnContainer">
                <h2 style="word-wrap: break-word; white-space: pre-wrap">@book.Value.Name</h2>
                <h3>@book.Value.Author</h3>
                <h4>Chapter count: Very many chapters</h4>
    
                <button class="btn btn-primary" @onclick="GoToBookReader" style="margin-top: 5px; margin-bottom: 5px; width: 30%">Читать</button>
                <br>
                @if (isLike)
                {
                    <div class="text-center" @onclick="LikeAction">
                        <svg xmlns="http://www.w3.org/2000/svg" class="btn-heart" style="width: 30px; height: 30px; fill: red; cursor: pointer;" viewBox="0 0 24 24">
                            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z">
                                <animate attributeName="fill" attributeType="XML"
                                        from="gray" to="red"
                                        dur="0.3s" repeatCount="1"/>
                            </path>
                        </svg>
                        @if (likes != null)
                        {
                            <label>@likes.Value.Count</label>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center" @onclick="LikeAction">
                        <svg xmlns="http://www.w3.org/2000/svg" class="btn-heart" style="width: 30px; height: 30px; fill: gray; cursor: pointer;" viewBox="0 0 24 24">
                            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z">
                                <animate attributeName="fill" attributeType="XML"
                                        from="red" to="gray"
                                        dur="0.3s" repeatCount="1"/>
                            </path>
                        </svg>
                        @if (likes != null)
                        {
                            <label>@likes.Value.Count</label>
                        }
                    </div>
                }
    
                @if (book.Value.Cycle != null)
                {
                    <a href="cycle/@book.Value.CycleId">@book.Value.Cycle.Name</a>
                }
                <div class="newLineContainer">
                    @if (genres != null)
                    {
                        @foreach (var genre in genres.Value.Data)
                        {
                            <a href="genre/{@genre.Id}">@genre.Name | </a>
                        }                    
                    }
                </div>
                <div>
                    <p>@book.Value.Description</p>
                @* <button>             </button> *@
                </div>
            </div>
        </div>
    
        <div class="innerColumnContainer">
            <div style="text-align:center">
                <h2>Отзывы</h2>
                @if (myReview == null)
                {
                    <button class="btn btn-secondary m-2" @onclick="AddReview">Отзыв</button>
                }
            </div>
    
            @if (myReview != null)
            {
                <div style="background: #eef1f1"  class="review">
                    @if (myReview.IsEdited)
                    {
                        <label style="font-size:smaller;">ред.</label>
                    }
                    <h4 class="m-1">@myReview.User.Name</h4>
                    @if (editMode)
                    {
                        <div class="form-group">
                            <textarea class="form-control" @bind="@myReview.Text" placeholder="Отзыв"></textarea>
                        </div>
                        @*<input type="text" @bind="@myReview.Text"> *@
                    }
                    else
                    {
                        <div class="jumbotron rounded-1 border-primary" style="background: white">
                            <p class="p-3 m-3 border-1 rounded-1">@myReview.Text</p>
                        </div>
                    }
                    <button class="btn btn-secondary btn-sm m-3" @onclick="AddReview">@reviewChangerText</button>
                </div>
            }
    
        @if (reviews != null)
        {
            @foreach (var review in reviews.Value.Data)
            {
                @if (CheckId(review.Id).Result)
                {
                    <div class="review">
                        @if (review.IsEdited)
                        {
                            <label style="font-size:smaller;">ред.</label>
                        }
                        <h4>@review.User.Name</h4>
                        <div class="jumbotron rounded-1 border-secondary" style="background: #fdfdfd">
                            <p class="p-3 m-3 border-1 rounded-1">@review.Text</p>
                        </div>
                    </div>                        
                }
            }                
        }
        </div>
    </div>
}
@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string action { get; set; }

    Response? response;

    Response<UserDto>? user = new();

    Response<BookDto>? book;
    Response<DataPage<GenreDto>>? genres;
    Response<DataPage<ReviewDto>>? reviews;
    Response<DataPage<LikeDto>>? likes;
    ReviewDto? myReview;

    string reviewChangerText = "Изменить";

    bool editMode = false;

    bool isLike = false;
    LikeDto like;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            likes = await client.GetFromJsonAsync<Response<DataPage<LikeDto>>>($"https://localhost:7190/api/Like/GetLikesForBook?bookId={Id}&isLastTime={false}");
            if (user != null)
            {
                var lk = await client.GetFromJsonAsync<Response<LikeDto>>($"https://localhost:7190/api/Like/CheckLike?userId={user.Value.Id}&bookId={Id}");
                if (lk.IsSuccess)
                {
                    like = lk.Value;
                    isLike = like != null ? true : false;
                }
            }
        }
        catch (Exception ex)
        {
            //navigation.NavigateTo("SignIn");
        }
        book = await client.GetFromJsonAsync<Response<BookDto>>($"https://localhost:7190/api/Book/GetBook?id={Id}");
        genres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetGenresForBook?bookId={Id}&start={0}");
        reviews = await client.GetFromJsonAsync<Response<DataPage<ReviewDto>>>($"https://localhost:7190/api/Review/GetForBook?bookId={Id}&start={0}");
        @if (user.IsSuccess)
        {
            myReview = reviews.Value.Data.FirstOrDefault(r => r.UserId == user.Value.Id);
        }
    }
    async Task AddReview()
    {
        if (user.IsSuccess)
        {
            if (editMode)
            {
                //myReview.IsEdited = true;
                using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Review/Update", myReview);
                reviewChangerText = "Сохранить";
                editMode = false;
            }
            else
            {
                editMode = true;
                if (myReview == null)
                {
                    ReviewDto reviewDto = new()
                        {
                            BookId = Convert.ToInt32(Id),
                            UserId = user.Value.Id,
                        };
                    using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Review/Create", reviewDto);
                    var rev = await client.GetFromJsonAsync<Response<ReviewDto>>($"https://localhost:7190/api/Review/GetForUserBook?bookId={Id}&userId={user.Value.Id}");
                    myReview = rev.Value;
                }
                reviewChangerText = "Изменить";
            }
        }
        else
        {
            navigation.NavigateTo("SignIn");
        }
    }
    async Task<bool> CheckAuth()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return resp.IsSuccess;
    }
    void GoToBookReader()
    {
        navigation.NavigateTo($"bookcontent/{Id}");
    }
    async Task<bool> CheckId(int id)
    {
        if (myReview != null)
        {
            if (myReview.Id == id)
            {
                return false;
            }
        }
        return true;
    }

    async Task LikeAction()
    {
        if (user.Value != null)
        {
            if (isLike)
            {
                await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Like/Delete?likeId={Id}");
                isLike = false;
            }
            else
            {
                like = new()
                    {
                        UserId = user.Value.Id,
                        BookId = Convert.ToInt32(Id),
                    };

                await client.PostAsJsonAsync($"https://localhost:7190/api/Like/Create", like);
                isLike = true;
                var lk = await client.GetFromJsonAsync<Response<LikeDto>>($"https://localhost:7190/api/Like/CheckLike?userId={user.Value.Id}&bookId={Id}");
            }
        }
    }
}