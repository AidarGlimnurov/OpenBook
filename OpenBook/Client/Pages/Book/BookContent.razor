@page "/BookContent/{Id}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (book == null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="jumbotron p-3 m-3 border-1 rounded-1" style="background: #f3f3f3; min-height: 60vh;">

        <a href="book/@Id">Назад</a>
        <H1>@book.Value.Name</H1>
        <button class="btn btn-secondary" @onclick="FavoriteAction" style="background: @actionColor">
            @if (favoriteBook.IsSuccess)
            {
                <label>Убрать из избранного</label>
            }
            else
            {
                <label>Добавить в избранное</label>
            }
        </button>
        <hr />
        @if (chapters != null)
        {
            <div class="jumbotron rounded-1 p-3"></div>
            @foreach (var chapter in chapters.Value.Data)
            {
                <a href="bookReader/@chapter.Id" link="#3e3e3e" vlink="#000000" alink="#8c8c8c">@chapter.Number @chapter.Name</a>
                <br>
            }        
        }
        else
        {
            <h3>Скоро здесь будут главы</h3>
        }
    </div>
}
@code {
    [Parameter]
    public string Id { get; set; }
    Response<BookDto> book;
    Response<DataPage<ChapterDto>> chapters;
    Response? response;
    Response<BookDto> favoriteBook = new() { IsSuccess = false };
    Response<UserDto>? user = new();

    string actionColor => favoriteBook.IsSuccess ? "#f69c9c" : "#9ca1f6";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            await GetFavoriteBook();
        }
        catch (Exception ex)
        {
            //navigation.NavigateTo("SignIn");
        }
        book = await client.GetFromJsonAsync<Response<BookDto>>($"https://localhost:7190/api/Book/Read?id={Id}");
        await GetChapters();
    }
    async Task<bool> CheckAuth()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return resp.IsSuccess;
    }
    async Task GetChapters()
    {
        chapters = await client.GetFromJsonAsync<Response<DataPage<ChapterDto>>>($"https://localhost:7190/api/Chapter/GetForBook?bookId={Id}&start={0}");
    }
    async Task GetFavoriteBook()
    {
        favoriteBook = await client.GetFromJsonAsync<Response<BookDto>>($"https://localhost:7190/api/Basket/GetBookk?userId={user.Value.Id}&bookId={Id}");
    }
    async Task FavoriteAction()
    {
        if (user.IsSuccess)
        {
            if (favoriteBook.IsSuccess)
            {
                var resp = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Basket/RemoveBook?userId={user.Value.Id}&bookId={Id}");
                await GetFavoriteBook();
            }
            else
            {
                var resp = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/Basket/AddBook?userId={user.Value.Id}&bookId={Id}");
                await GetFavoriteBook();
            }
        }
        else
        {
            navigation.NavigateTo("SignIn");
        }
    }
}
