@page "/favoritebook"
@using OpenBook.Shared.Dtos
@using OpenBook.Shared.OutputData
@using OpenBook.Shared.SupportData
@using System.Net.Http.Headers
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (books == null)
{
    <div class="text-center m-3">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="container mt-3 p-3 border rounded bg-light">
        <div class="row">
        @foreach (var book in books.Value.Data)
        {
            <div class="col-md-3 mb-3 mr-1 ml-1">
                <div class="card h-100">
                    <a href="book/@book.Id/1">
                    @if (book.Cover.Length < 20)
                    {
                        <img src="/image/DefaultCover.jpg" class="card-img-top" alt="Обложка">
    
                    }
                    else
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)" class="card-img-top" alt="Обложка">
                    }
                    </a>
                    <div class="card-body">
                        <h5 class="card-title">@book.Name</h5>
                    </div>
                </div>
            </div>
        }
        </div>
    
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(books.Value.Start > 0 ? "" : "disabled")">
                    <button class="page-link" @onclick="GetLastPage">Предыдущая</button>
                </li>
                <li class="page-item disabled">
                    <a class="page-link">@PageNumber</a>
                </li>
                <li class="page-item @(books.Value.Count == 10 ? "" : "disabled")">
                    <button class="page-link" @onclick="GetNextPage">Следующая</button>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    Response<DataPage<BookDto>>? books;
    int start = 0;
    int count = 10;
    public int PageNumber { get; set; } = 1;
    string name = string.Empty;

    Response<UserDto>? user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            await GetBooks(start, count);
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("SignIn");
        }
    }

    public async Task GetNextPage()
    {
        start += 10;
        PageNumber++;
        await GetBooks(start, count);
    }

    public async Task GetLastPage()
    {
        if (PageNumber > 1)
        {
            start -= 10;
            PageNumber--;
            await GetBooks(start, count);
        }
    }

    private async Task GetBooks(int start, int count, string? name = "")
    {
        books = await client.GetFromJsonAsync<Response<DataPage<BookDto>>>($"https://localhost:7190/api/Basket/GetBooks?userId={user.Value.Id}&start={start}&count={count}");
    }
}