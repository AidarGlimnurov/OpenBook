@page "/CyclePage/{Id}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    .columnContainer{
        display: flex;
        flex-direction: column;
    }

    .rowContainer {
        display: flex;
        flex: 1 1;
        flex-direction:row;
        flex-wrap: wrap;
        justify-content: space-between;
        padding: 20px;
        width: 100%;
        margin: 5px;
        background: #ccc;
        border-radius: 5px;
    }

    .innerColumnContainer{
        display: flex;
        flex-direction: column;
        padding: 20px;
        width: 100%;
        margin: 5px;
        background: #ccc;
        border-radius: 5px;
    }
    .newLineContainer{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap
    }
    .review{
        border: 1px solid black;
        padding: 5px;
        matgin: 2px;
        border-radius: 5px;
    }
</style>
@if (cycle == null)
{
    <span>Загрузка...</span>
}
else
{
    <div class="columnContainer">
        <a href="CyclesPage">Назад</a>
        <div class="rowContainer">
            <div>
                <img style="width: 90%; height: 40vh" src="data:image/jpeg;base64,@Convert.ToBase64String(cycle.Value.Cover)">
            </div>
            <div class="columnContainer">
                <h2>@cycle.Value.Name</h2>

                <button class="btn btn-primary" @onclick="GoToBookReader" style="margin-top: 5px; margin-bottom: 5px; width: 30%">Читать</button>

                <div>
                    <p>@cycle.Value.Description</p>
                @* <button>Раскрыть блок</button> *@
                </div>
            </div>
        </div>
        <div class="innerColumnContainer">
            <div style="text-align:center">
                <h2>Книги</h2>
            </div>
            @if (books == null || books.Value.Data == null)
            {
                <p>Скоро здесь будут книги...</p>
            }
            else
            {
                <div>
                    @foreach (var book in books.Value.Data)
                    {
                        <a href="book/@book.Id">
                            <div style="border-radius: 5px; border: 1px solid black; width: 100%; padding: 5px">
                                <img style="width: 60px; height: 80px" src="data:image/jpeg;base64,@Convert.ToBase64String(book.Cover)">
                                <label>@book.Name</label>
                            </div>
                        </a>
                    }
                </div>                    
            }
        </div>
    </div>
}
@code {
    [Parameter]
    public string Id { get; set; }

    Response? response;

    Response<UserDto>? user = new();

    Response<CycleDto>? cycle;
    Response<DataPage<BookDto>>? books;

    bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        }
        catch (Exception ex)
        {
            //navigation.NavigateTo("SignIn");
        }
        cycle = await client.GetFromJsonAsync<Response<CycleDto>>($"https://localhost:7190/api/Cycle/GetCycle?id={Id}");
        books = await client.GetFromJsonAsync<Response<DataPage<BookDto>>>($"https://localhost:7190/api/Book/GetBooksForCycle?cycleId={Id}&start={0}");
    }

    async Task<bool> CheckAuth()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return resp.IsSuccess;
    }
    void GoToBookReader()
    {
        navigation.NavigateTo($"bookcontent/{Id}");
    }
}
