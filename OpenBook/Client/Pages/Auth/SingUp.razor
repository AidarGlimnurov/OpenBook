@page "/SignUp"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@inject HttpClient client
@inject NavigationManager navigation 
<style>
    .container {
        border: 2px solid black;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: auto;
        margin-top: 50px;
    }

    .input-group {
        margin-bottom: 15px;
    }

    .rounded-button {
        border-radius: 5px;
        padding: 10px;
        width: 100%;
        cursor: pointer;
        background-color: #3498db;
        color: white;
        border: none;
    }

    .rounded-button:disabled {
        background-color: #95a5a6;
        cursor: not-allowed;
    }

    .password-toggle {
        cursor: pointer;
        color: #3498db;
        text-decoration: underline;
    }
</style>

<h3 style="text-align:center">Регистрация</h3>

<div class="container">
    <div class="input-group">
        <input class="form-control" type="text" id="login" @bind="user.Email" placeholder="Email" />
        <br>
        @if (!checkEmail)
        {
            <label style="color: red">Данный email уже зарегистрирован</label>
        }
    </div>

    <div class="input-group">
        <input class="form-control" type="text" id="alias" @bind="user.Name" placeholder="Имя" />
                <br>
        @if (!checkName)
        {
            <label style="color: red">Данное имя уже занято</label>
        }
    </div>

    <div class="input-group">
        <input class="form-control" type="@passwordInputType" id="password" @bind="user.Password" placeholder="Пароль"/>
        <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary password-toggle">
            <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
        </button>
    </div>

    <div class="input-group">
        <input class="form-control" type="@passwordInputType" id="confirmPassword" @bind="confirmPassword" placeholder="Повторите пароль" />
        <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary password-toggle">
            <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
        </button>
    </div>
    <div clas="text-center">
        <button class="btn btn-primary rounded-button" @onclick="Register" disabled="@(!IsFormValid)">Регистрация</button>
        <a href="SignIn">Есть аккаунт? Войти</a>
    </div>
</div>

@code {
    Response response;
    private UserDto user = new();

    bool checkEmail = true;
    bool checkName = true;

    private string confirmPassword;
    private bool showPassword = false;

    private string eyeIconPath => showPassword ? "../image/OpenEye.svg" : "../image/CloseEye.svg";

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(user.Email)
        && !string.IsNullOrWhiteSpace(user.Name)
        && !string.IsNullOrWhiteSpace(user.Password)
        && !string.IsNullOrWhiteSpace(confirmPassword)
        && IsValidEmail(user.Email)
        && user.Password == confirmPassword;

    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return true; // Если успешно создан MailAddress, то email верен
        }
        catch
        {
            return false; // В противном случае email неверен
        }
    }
    private async Task Register()
    {
        if (IsFormValid)
        {
            if (await CheckEmailAsync())
            {
                checkEmail = false;
            }
            if (await CheckName())
            {
                checkName = false;
            }
            if (checkName && checkEmail)
            {
                user.RoleId = 2;
                using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/User/CreateWithBasket", user);
                TestResponse.EnsureSuccessStatusCode();
                response = await TestResponse.Content.ReadFromJsonAsync<Response>();
                if (response.IsSuccess)
                {
                    navigation.NavigateTo("SignIn");
                }
                else
                {
                    navigation.NavigateTo("");
                }
            }
        }
    }
    private async Task<bool> CheckEmailAsync()
    {
        var emailChecker = await client.GetFromJsonAsync<Response<UserDto>>($"https://localhost:7190/api/User/GetByEmail?email={user.Email}");
        if (emailChecker.Value == null) return false;
        return true;
    }
    private async Task<bool> CheckName()
    {
        var nameChecker = await client.GetFromJsonAsync<Response<UserDto>>($"https://localhost:7190/api/User/GetByName?name={user.Name}");
        if (nameChecker.Value == null) return false;
        return true;
    }
}
