@page "/PasswordReset"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@inject HttpClient client
@inject NavigationManager navigation 
<style>
    .container {
        border: 2px solid black;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: auto;
        margin-top: 50px;
    }

    .input-group {
        margin-bottom: 15px;
    }

    .rounded-button {
        border-radius: 5px;
        padding: 10px;
        width: 100%;
        cursor: pointer;
        background-color: #3498db;
        color: white;
        border: none;
    }

    .rounded-button:disabled {
        background-color: #95a5a6;
        cursor: not-allowed;
    }

    .password-toggle {
        cursor: pointer;
        color: #3498db;
        text-decoration: underline;
    }
</style>

<h3 style="text-align:center">Сброс пароля</h3>

<div class="container">
    @*<button @onclick="Pomenay">Поменяй</button>*@

    @switch (stateMode)
    {
        case (blockState.mailMode):
                <input class="form-control" type="text" id="login" @bind="email" placeholder="Email" style="margin-bottom: 5px"/>
                <br>
                <button class="btn btn-primary m-1" @onclick="GetCode">Получить код</button>
            break;
        case (blockState.codeMode):
                <button class="btn btn-secondary" @onclick="GoEmail">изменить email</button> <br>
                <label style="color: red">@msg</label> <br>
                <input type="text" id="login" class="form-control m-1" @bind="code" placeholder="Code" style="margin-bottom: 5px; margin-top:5px"/> <br> 
                <br>
                <button class="btn btn-primary" @onclick="CheckCode">Проверить</button>
            break;
        case (blockState.passwordMode):
                <label style="color: green">@email</label> <br>
                <div class="input-group">
                    <input class="form-control" type="@passwordInputType" id="password" @bind="password" placeholder="Пароль"/>
                    <br>
                    <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary m-1">
                        <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
                    </button>
                </div>

                <div class="input-group">
                    <input class="form-control" type="@passwordInputType" id="confirmPassword" @bind="confirmPassword" placeholder="Повторите пароль"/>
                    <br>
                    <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary">
                        <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
                    </button>
                </div>
                <button class="btn btn-primary" @onclick="ChangePassword">Поменять</button>
            break;
    }

</div>

@code {
    string email;
    string code;
    string msg;

    private string confirmPassword;
    private string password;
    private bool showPassword = false;

    Response response;

    blockState stateMode = blockState.mailMode;

    private async Task GetCode()
    {
        var codeResponse = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/User/SendVerifEmail?email={email}");

        stateMode = blockState.codeMode;
    }

    private async Task GoEmail()
    {
        stateMode = blockState.mailMode;
    }

    private async Task CheckCode()
    {
        response = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/User/CheckCode?email={email}&code={code}");
        if (response.IsSuccess)
        {
            stateMode = blockState.passwordMode;
        }
        else
        {
            msg = "Не правильный код!";
        }
    }
    private async Task ChangePassword()
    {

        response = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/User/ResetPassword?email={email}&password={password}");
        if (response.IsSuccess)
        {
            navigation.NavigateTo("signIn");
        }
        else
        {
            stateMode = blockState.codeMode;
            msg = "Не удалось поменять пароль!";
        }
    }

    void Pomenay()
    {
        if (stateMode == blockState.mailMode)
        {
            stateMode = blockState.codeMode;
            return;
        }
        if (stateMode == blockState.codeMode)
        {
            stateMode = blockState.passwordMode;
            return;
        }
        if (stateMode == blockState.passwordMode)
        {
            stateMode = blockState.mailMode;
            return;
        }
    }

    private string eyeIconPath => showPassword ? "../image/OpenEye.svg" : "../image/CloseEye.svg";

    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return true; // Если успешно создан MailAddress, то email верен
        }
        catch
        {
            return false; // В противном случае email неверен
        }
    }

    enum blockState
    {
        mailMode,
        codeMode,
        passwordMode
    }
}
