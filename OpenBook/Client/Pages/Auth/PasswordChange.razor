@page "/PasswordChange"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using System.Net.Http.Headers;
@using OpenBook.Shared.SupportData;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient client
@inject NavigationManager navigation 
<style>
    .container {
        border: 2px solid black;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: auto;
        margin-top: 50px;
    }

    .input-group {
        margin-bottom: 15px;
    }

    .rounded-button {
        border-radius: 5px;
        padding: 10px;
        width: 100%;
        cursor: pointer;
        background-color: #3498db;
        color: white;
        border: none;
    }

    .rounded-button:disabled {
        background-color: #95a5a6;
        cursor: not-allowed;
    }

    .password-toggle {
        cursor: pointer;
        color: #3498db;
        text-decoration: underline;
    }
</style>

@if (isAuth == null)
{
    <div class="text-center m-3">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
        <div class="container">
            @if (isAuth == true)
            {
                @switch (blockMode)
                {
                    case (stateMode.checkMode):
                        <div class="input-group">
                                <input class="form-control" type="@passwordInputType" id="password" @bind="password" placeholder="Старый пароль"/>
                                <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary">
                                    <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
                                </button>
                            <button class="btn btn-primary" @onclick="CheckPassword">Проверить</button>
                            <a href="PasswordReset">Забыли пароль? Восстановить</a>     
                        </div>
                        break;
                    case (stateMode.passwordMode):
                        <lable style="color: @labelColor">@msg</lable>
                        <div class="input-group">
                            <input class="form-control" type="@passwordInputType" id="password" @bind="password" placeholder="Пароль"/>
                            <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary">
                                <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
                            </button>
                        </div>

                        <div class="input-group">
                            <input class="form-control" type="@passwordInputType" id="confirmPassword" @bind="password2" placeholder="Повторите пароль"/>
                            <button @onclick="TogglePasswordVisibility" class="btn btn-outline-secondary">
                                <img style="width:20px; height:15px;" src="@eyeIconPath" alt="Глаз">
                            </button>
                        </div>

                        <button class="rounded-button" @onclick="ChangePassword" disabled="@(!IsFormValid)">Поменять</button>
                        break;
                }
            }
        </div>
}

@code {
    stateMode blockMode = stateMode.checkMode;
    bool? isAuth = null;
    AuthView authView = new AuthView();
    AuthInfo authInfo = new AuthInfo();
    Response response;
    Response<UserDto>? user = new();
    string msg;
    string labelColor = "green";

    string password;
    string password2;

    private bool showPassword = false;

    private string eyeIconPath => showPassword ? "../image/OpenEye.svg" : "../image/CloseEye.svg";

    private string passwordInputType => showPassword ? "text" : "password";

    private bool IsFormValid =>
    password == password2;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            if (cookieContent != null && await CheckAuth())
            {
                isAuth = true;
            }
        }
        catch (Exception ex)
        {
            isAuth = false;
        }
    }

    async Task<bool> CheckAuth()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return resp.IsSuccess;
    }

    private async Task LogOut()
    {
        await localStorage.ClearAsync();
        navigation.NavigateTo("/Profile");
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    async Task CheckPassword()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>($"https://localhost:7190/api/User/GetByEmailPassword?email={user.Value.Email}&password={password}");
        if (resp.IsSuccess)
        {
            blockMode = stateMode.passwordMode;
            password = "";
        }
        else
        {
            labelColor = "red";
            msg = "Не верный пароль!";
        }
    }
    async Task ChangePassword()
    {
        user.Value.Password = password;
        using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/User/Update", user.Value);
        TestResponse.EnsureSuccessStatusCode();
        response = await TestResponse.Content.ReadFromJsonAsync<Response>();
        if (response.IsSuccess)
        {
            msg = "Пароль успешно узменен!";
            labelColor = "green";
            password = "";
            password2 = "";
            navigation.NavigateTo("profile");
        }
        else
        {
            labelColor = "red";
            msg = "Не удалось поменять пароль!";
        }
    }

    enum stateMode
    {
        checkMode,
        passwordMode
    }
}
