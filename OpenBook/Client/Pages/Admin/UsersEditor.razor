@page "/usersEditor"

@layout PageLayout 

@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using System.Net.Http.Headers;
@using OpenBook.Shared.SupportData;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigation
@inject HttpClient client

@if (users == null)
{
    <div class="text-center m-3">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
        <div class="jumbotron jumbotron-fluid border rounded p-1 m-1">
            <a href="adminpanel">Назад</a>
            <br>
            <label style="color: @labelColor">@msg</label>
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Email</th>
                        <th>Name</th>
                        <th>Password</th>
                        <th>IsVerif</th>
                        <th>Role</th>
                        <th>ChangeRole</th>
                        <th>Update</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                @if (users.IsSuccess)
                {
                    @foreach (var userItem in users.Value.Data)
                    {
                                    <tr>
                                        <td>@userItem.Id</td>
                                        <td><input @bind="@userItem.Email" placeholder="@userItem.Email" class="form-control"></td>
                                        <td><input @bind="@userItem.Name" placeholder="@userItem.Name" class="form-control"></td>
                                        <td><input @bind="@userItem.Password" placeholder="@userItem.Password" class="form-control"></td>
                                        <td><input type="checkbox" @bind="@userItem.IsVerified"></td>
                                        <td>@userItem.Role.Name</td>
                                        <td>
                                            <select @bind="userItem.RoleId">
                                                <option selected>Выбрать новый</option>
                                    @foreach (var role in roles.Value.Data)
                                    {
                                                        <option value="@role.Id">@role.Name</option>
                                    }
                                            </select>
                                        </td>
                                        <td><button @onclick="(() => Update(userItem))" class="btn btn-warning">Update</button></td>
                                        <td><button @onclick="(() => Delete(userItem))" class="btn btn-danger">Delete</button></td>
                                    </tr>
                    }
                            <tr>
                                <td>Id</td>
                                <td><input @bind="@newUser.Email"></td>
                                <td><input @bind="@newUser.Name"></td>
                                <td><input @bind="@newUser.Password"></td>
                                <td><input type="checkbox" @bind="@newUser.IsVerified"></td>
                                <td>-</td>
                                <td>
                                    <select @bind="newUser.RoleId">
                                        <option selected>Выбрать</option>
                                @foreach (var role in roles.Value.Data)
                                {
                                                <option value="@role.Id">@role.Name</option>
                                }
                                    </select>
                                </td>
                                <td><button @onclick="Create" class="btn btn-primary">Создать</button></td>
                                <td></td>
                            </tr>            
                }
                </tbody>
            </table>
        </div>
}
@code {
    AuthView authView = new AuthView();
    AuthInfo authInfo = new AuthInfo();
    Response? response;
    UserDto newUser = new();
    Response<UserDto>? user;
    Response<DataPage<UserDto>>? users;
    Response<DataPage<RoleDto>>? roles;
    string msg;
    string labelColor = "green";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            await CheckAuth();
            if (!await CheckAdmin()) throw new Exception("User is not Admin!");
            await GetUsers();
            roles = await client.GetFromJsonAsync<Response<DataPage<RoleDto>>>($"https://localhost:7190/api/Role/GetAll?start={0}");
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("SignIn");
        }
    }
    async Task<bool> CheckAdmin()
    {
        if (user.Value.Role.Name == "Admin" || user.Value.Role.Name == "SuperAdmin") return true;
        return false;
    }
    async Task<bool> CheckAuth()
    {
        user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return user.IsSuccess;
    }
    async Task GetUsers()
    {
        users = await client.GetFromJsonAsync<Response<DataPage<UserDto>>>($"https://localhost:7190/api/User/GetAll?start={0}");
    }
    async Task Update(UserDto changeUser)
    {
        using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/User/Update", changeUser);
        TestResponse.EnsureSuccessStatusCode();
        response = await TestResponse.Content.ReadFromJsonAsync<Response>();
        if (response.IsSuccess)
        {
            msg = "Пользователь успешно обновлён!";
            labelColor = "green";
            await GetUsers();
        }
        else
        {
            msg = $"Не удалось обновить пользователя! Ошибка:\n{response.ErrorInfo}";
            labelColor = "red";
        }
    }
    async Task Delete(UserDto changeUser)
    {
        var resp = await client.GetFromJsonAsync<Response>($"https://localhost:7190/api/User/Delete?id={changeUser.Id}");
        if (resp.IsSuccess)
        {
            msg = "Пользователь успешно удалён!";
            labelColor = "green";
            await GetUsers();
        }
        else
        {
            msg = $"Не удалось удалить пользователя! Ошибка:\n{resp.ErrorInfo}";
            labelColor = "red";
        }
    }
    async Task Create()
    {
        using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/User/CreateWithBasket", newUser);
        TestResponse.EnsureSuccessStatusCode();
        response = await TestResponse.Content.ReadFromJsonAsync<Response>();
        if (response.IsSuccess)
        {
            msg = "Пользователь успешно создан!";
            labelColor = "green";
            await GetUsers();
            newUser = new();
        }
        else
        {
            msg = $"Не удалось создать пользователя! Ошибка:\n{response.ErrorInfo}";
            labelColor = "red";
        }
    }
}
