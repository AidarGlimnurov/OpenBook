@page "/book/{Id}"
@using OpenBook.Shared.Dtos;
@using OpenBook.Shared.OutputData;
@using OpenBook.Shared.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    .columnContainer{
        display: flex;
        flex-direction: column;
    }

    .rowContainer {
        display: flex;
        flex: 1 1;
        flex-direction:row;
        flex-wrap: wrap;
        justify-content: space-between;
        padding: 20px;
        width: 100%;
        margin: 5px;
        background: #ccc;
        border-radius: 5px;
    }

    .innerColumnContainer{
        display: flex;
        flex-direction: column;
        padding: 20px;
        width: 100%;
        margin: 5px;
        background: #ccc;
        border-radius: 5px;
    }
    .newLineContainer{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap
    }
</style>
@if (book == null)
{
        <span>Загрузка...</span>
}
else
{
        <div class="columnContainer">
            <div class="rowContainer">
                <div>
                    <img style="width: 90%; height: 40vh" src="data:image/jpeg;base64,@Convert.ToBase64String(book.Value.Cover)">
                </div>
                <div class="columnContainer">
                    <h2>@book.Value.Name</h2>
                    <h3>@book.Value.Author</h3>
                    <h4>Chapter count: Very many chapters</h4>

                    <button class="btn btn-primary" @onclick="GoToBookReader" style="margin-top: 5px; margin-bottom: 5px; width: 30%">Читать</button>

                @if (book.Value.Cycle != null)
                {
                            <a href="cycle/{@book.Value.CycleId}">@book.Value.Cycle.Name</a>
                }
                    <div class="newLineContainer">
                    @if (genres != null)
                    {
                        @foreach (var genre in genres.Value.Data)
                        {
                                        <a href="genre/{@genre.Id}">@genre.Name | </a>
                        }                    
                    }
                    </div>
                    <div>
                        <p>@book.Value.Description</p>
                    @* <button>Раскрыть блок</button> *@
                    </div>
                </div>
            </div>
            <div class="innerColumnContainer">
                <div style="text-align:center">
                    <h2>Отзывы</h2>
                @if (myReview == null)
                {
                            <button class="btn btn-secondary" @onclick="AddReview">@reviewChangerText</button>
                }
                </div>
            @if (myReview != null)
            {
                        <div>
                    @if (myReview.IsEdited)
                    {
                                    <label>ред.</label>
                    }
                            <h4>@myReview.User.Name</h4>
                    @if (editMode)
                    {
                                    <input type="text" @bind="@myReview.Text">
                    }
                    else
                    {
                                    <p>@myReview.Text</p>
                    }
                            <button class="btn btn-secondary">Изменить</button>
                        </div>
            }
                <div></div>
            @if (reviews != null)
            {
                @foreach (var review in reviews.Value.Data)
                {
                    @if (review.Id != myReview.Id)
                    {
                                        <div>
                            @if (review.IsEdited)
                            {
                                                    <label>ред.</label>
                            }
                                            <h4>@review.User.Name</h4>
                                            <p>@review.Text</p>
                                        </div>                        
                    }
                }                
            }
            </div>
        </div>
}
@code {
    [Parameter]
    public string Id { get; set; }

    Response? response;

    Response<UserDto>? user = new();

    Response<BookDto>? book;
    Response<DataPage<GenreDto>>? genres;
    Response<DataPage<ReviewDto>>? reviews;
    ReviewDto? myReview;

    string reviewChangerText = "Добавить отзыв";

    bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
            book = await client.GetFromJsonAsync<Response<BookDto>>($"https://localhost:7190/api/Book/GetBook?id={Id}");
            genres = await client.GetFromJsonAsync<Response<DataPage<GenreDto>>>($"https://localhost:7190/api/Genre/GetGenresForBook?bookId={Id}&start{0}");
            reviews = await client.GetFromJsonAsync<Response<DataPage<ReviewDto>>>($"https://localhost:7190/api/Review/GetForBook?bookId={Id}&start{0}");
            myReview = reviews.Value.Data.FirstOrDefault(r => r.Id == user.Value.Id);
            int a = 0;
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("SignIn");
        }
    }
    async Task AddReview()
    {
        if (editMode)
        {
            reviewChangerText = "Добавить отзыв";
            editMode = false;
        }
        else
        {
            reviewChangerText = "Сохранить";
            editMode = true;
            if (myReview == null)
            {
                myReview = new()
                    {
                        BookId = Convert.ToInt32(Id),
                        UserId = user.Value.Id,
                    };
                using HttpResponseMessage TestResponse = await client.PostAsJsonAsync("https://localhost:7190/api/Review/Create", myReview);
                var rev = await client.GetFromJsonAsync<Response<ReviewDto>>($"https://localhost:7190/api/Review/GetForBook?bookId={Id}&start{0}");
                myReview = rev.Value;
            }

        }

    }
    async Task<bool> CheckAuth()
    {
        var resp = await client.GetFromJsonAsync<Response<UserDto>>("https://localhost:7190/api/Auth/GetUserInfo");
        return resp.IsSuccess;
    }
    void GoToBookReader()
    {
        navigation.NavigateTo($"bookreader/{Id}");
    }
}